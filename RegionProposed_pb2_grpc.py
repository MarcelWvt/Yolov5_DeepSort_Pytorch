# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import RegionProposed_pb2 as RegionProposed__pb2


class RegionProposedStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProcessMp4File = channel.unary_stream(
                '/wvtlicenseplate.RegionProposed/ProcessMp4File',
                request_serializer=RegionProposed__pb2.InputFileMp4.SerializeToString,
                response_deserializer=RegionProposed__pb2.DetectionFrame.FromString,
                )
        self.TestMet = channel.unary_unary(
                '/wvtlicenseplate.RegionProposed/TestMet',
                request_serializer=RegionProposed__pb2.testInput.SerializeToString,
                response_deserializer=RegionProposed__pb2.TestOutput.FromString,
                )


class RegionProposedServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ProcessMp4File(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TestMet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RegionProposedServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProcessMp4File': grpc.unary_stream_rpc_method_handler(
                    servicer.ProcessMp4File,
                    request_deserializer=RegionProposed__pb2.InputFileMp4.FromString,
                    response_serializer=RegionProposed__pb2.DetectionFrame.SerializeToString,
            ),
            'TestMet': grpc.unary_unary_rpc_method_handler(
                    servicer.TestMet,
                    request_deserializer=RegionProposed__pb2.testInput.FromString,
                    response_serializer=RegionProposed__pb2.TestOutput.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'wvtlicenseplate.RegionProposed', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RegionProposed(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ProcessMp4File(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/wvtlicenseplate.RegionProposed/ProcessMp4File',
            RegionProposed__pb2.InputFileMp4.SerializeToString,
            RegionProposed__pb2.DetectionFrame.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TestMet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/wvtlicenseplate.RegionProposed/TestMet',
            RegionProposed__pb2.testInput.SerializeToString,
            RegionProposed__pb2.TestOutput.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
